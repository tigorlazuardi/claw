syntax = "proto3";

package claw.v1;

import "buf/validate/validate.proto";
import "claw/v1/pagination.proto";
import "claw/v1/source.proto";
import "google/protobuf/timestamp.proto";

// SourceSortField defines the fields that can be used for sorting sources
enum SourceSortField {
  SOURCE_SORT_FIELD_UNSPECIFIED = 0;
  SOURCE_SORT_FIELD_ID = 1;
  SOURCE_SORT_FIELD_NAME = 2;
  SOURCE_SORT_FIELD_DISPLAY_NAME = 3;
  SOURCE_SORT_FIELD_COUNTBACK = 4;
  SOURCE_SORT_FIELD_IS_DISABLED = 5;
  SOURCE_SORT_FIELD_LAST_RUN_AT = 6;
  SOURCE_SORT_FIELD_CREATED_AT = 7;
  SOURCE_SORT_FIELD_UPDATED_AT = 8;
}

// SourceService provides CRUD operations for sources
service SourceService {
  // Create a new source
  rpc CreateSource(CreateSourceRequest) returns (CreateSourceResponse);

  // Get a source by ID
  rpc GetSource(GetSourceRequest) returns (GetSourceResponse);

  // Update an existing source
  rpc UpdateSource(UpdateSourceRequest) returns (UpdateSourceResponse);

  // Delete a source
  rpc DeleteSource(DeleteSourceRequest) returns (DeleteSourceResponse);

  // List sources with optional filtering
  rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse);

  // List available source types that can be added
  rpc ListAvailableSources(ListAvailableSourcesRequest) returns (ListAvailableSourcesResponse);

  // Get the next run time for a cron expression. The time is adjusted to the server's time zone.
  rpc GetCronNextTime(GetCronNextTimeRequest) returns (GetCronNextTimeResponse);

  // Validate source parameters using the backend ValidateTransformParameter method
  rpc ValidateSourceParameters(ValidateSourceParametersRequest) returns (ValidateSourceParametersResponse);
}

// Create source request
message CreateSourceRequest {
  // Name of source (e.g., "reddit", "booru")
  string name = 1 [(buf.validate.field).string.min_len = 1];

  // Display name for the source
  string display_name = 3 [(buf.validate.field).string.min_len = 1];

  // Parameters for the source
  string parameter = 4 [(buf.validate.field).string.min_len = 1];

  // Number of items to look back when searching
  int32 countback = 5 [(buf.validate.field).int32.gte = 0];

  // Whether the source is disabled
  bool is_disabled = 6;

  // Optional schedules to create with the source
  repeated string schedules = 7;
}

// Create source response
message CreateSourceResponse {
  // The created source
  Source source = 1;

  // Created schedules
  repeated SourceSchedule schedules = 2;
}

// Get source request
message GetSourceRequest {
  // Source ID to retrieve
  int64 id = 1;

  // Whether to include schedules
  optional bool include_schedules = 2;
}

// Get source response
message GetSourceResponse {
  // The requested source
  Source source = 1;

  // Associated schedules (if requested)
  repeated SourceSchedule schedules = 2;
}

// Update source request
message UpdateSourceRequest {
  // Source UID to update
  int64 id = 1;

  // Updated name (optional)
  optional string name = 2;

  // Updated display name (optional)
  optional string display_name = 4;

  // Updated parameters (optional)
  optional string parameter = 5;

  // Updated countback (optional)
  optional int32 countback = 6;

  // Updated disabled status (optional)
  optional bool is_disabled = 7;
}

// Update source response
message UpdateSourceResponse {
  // The updated source
  Source source = 1;
}

// Delete source request
message DeleteSourceRequest {
  // Source IDs to delete
  repeated int64 ids = 1;
}

// Delete source response
message DeleteSourceResponse {
  // Whether the deletion was successful
  bool success = 1;
}

// List sources request
message ListSourcesRequest {
  // Optional filter by name
  optional string name = 1;

  // Search term to filter sources by uid, name, or display name
  optional string search = 2;

  message Sort {
    // Field to sort by
    SourceSortField field = 1 [(buf.validate.field).enum.defined_only = true];
    // Whether to sort in descending order
    bool desc = 2;
  }

  optional bool include_schedules = 3;

  // Fields to sort by.
  repeated Sort sorts = 4;

  // Pagination parameters. Use the same sort fields
  // and then set this to previous response's pagination
  // to get the next page or previous page of results.
  //
  // Changing sort fields while paginating may lead to
  // unexpected results.
  //
  // If user changes sort fields, client should reset
  // by using empty tokens.
  optional Pagination pagination = 5;
}

// List sources response
message ListSourcesResponse {
  message Item {
    Source source = 1;
    repeated SourceSchedule schedules = 2;
  }
  // List of sources
  repeated Item items = 1;
  Pagination pagination = 2;
}

// Helper message for schedules in list response
message SourceScheduleList {
  repeated SourceSchedule schedules = 1;
}

// List available sources request
message ListAvailableSourcesRequest {
  // No parameters needed - returns all registered source types
}

// Available source information
message AvailableSource {
  // Source name identifier (e.g., "claw.reddit.v1")
  string name = 1;

  // Human-readable display name
  string display_name = 2;

  // Author of the source implementation
  string author = 3;

  // URL to author's profile or contact
  string author_url = 4;

  // Help text for the source parameter
  string parameter_help = 5;

  // Placeholder text for the parameter input
  string parameter_placeholder = 6;

  bool require_parameter = 7;

  string description = 8;

  int32 default_countback = 9;

  bool have_schedule_conflict_check = 10;
}

// List available sources response
message ListAvailableSourcesResponse {
  // List of available source types
  repeated AvailableSource sources = 1;
}

// Get cron next time request
message GetCronNextTimeRequest {
  // Cron expression to evaluate
  string cron_expression = 1 [(buf.validate.field).string.min_len = 1];
}

// Get cron next time response
message GetCronNextTimeResponse {
  // Next scheduled time based on the cron expression adjusted to
  // server's time zone.
  google.protobuf.Timestamp next_time = 1;

  // Time zone is the server's time zone, using IANA Time Zone database format
  // (e.g., "America/New_York", "UTC", "Asia/Tokyo")
  string zone = 2;
}

// Validate source parameters request
message ValidateSourceParametersRequest {
  // Name of the source to validate against
  string source_name = 1 [(buf.validate.field).string.min_len = 1];

  // Parameters to validate
  string parameter = 2 [(buf.validate.field).string.min_len = 1];
}

// Validate source parameters response
message ValidateSourceParametersResponse {
  // Transformed/normalized parameter (if valid)
  string transformed_parameter = 1;
}
